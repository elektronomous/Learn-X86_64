Do not worry about movabs for now; it is there because of 64-bit addressing, 
and it is used to put an immediate (value) in a register

The x stands for “examine,” and the s stands for “string.” GDB answered
that 0x404028 is the start of the string msg and tries to show the whole
string up until a string-terminating 0 (x/s command)

    (gdb) x/c 0x404028
    0x404028 <msg>: 72 'H'

With c you ask for a character. Here GDB returns the first character of
msg, preceded by the decimal ASCII code of that character.

Use this to show 13 characters starting at a memory address (see Figure 3-6):
    (gdb) x/13c 0x404028
    0x404028 <msg>: 72 'H'  101 'e' 108 'l' 108 'l' 111 'o' 44 ','  32 ' '  87 'W'
    0x404030:       111 'o' 114 'r' 108 'l' 100 'd' 0 '\000'

Use the following to show 13 characters starting at a memory address in
decimal representation (see Figure 3-7):
    (gdb) x/13d 0x404028
    0x404028 <msg>: 72      101     108     108     111     44      32      87
    0x404030:       111     114     108     100     0

Use the following to show msg (see Figure 3-9):
    (gdb) x/s &msg
    0x404028 <msg>: "Hello, World"

Let’s return to the disassemble listing. Type the following:
    (gdb) x/2x 0401110
    0x401110 <main>:        0xb8    0x01
This shows in hexadecimal the content of the two memory addresses starting at 0x401110

we will put a break in the program, pausing the execution and
allowing us to examine a number or things
    (gdb) break main
    Breakpoint 1 at 0x401110: file hello.asm, line 10