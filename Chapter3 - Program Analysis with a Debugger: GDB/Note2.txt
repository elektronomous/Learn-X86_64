Do not worry about movabs for now; it is there because of 64-bit addressing, 
and it is used to put an immediate (value) in a register

The x stands for “examine,” and the s stands for “string.” GDB answered
that 0x404028 is the start of the string msg and tries to show the whole
string up until a string-terminating 0 (x/s command)

    (gdb) x/c 0x404028
    0x404028 <msg>: 72 'H'

With c you ask for a character. Here GDB returns the first character of
msg, preceded by the decimal ASCII code of that character.

Use this to show 13 characters starting at a memory address (see Figure 3-6):
    (gdb) x/13c 0x404028
    0x404028 <msg>: 72 'H'  101 'e' 108 'l' 108 'l' 111 'o' 44 ','  32 ' '  87 'W'
    0x404030:       111 'o' 114 'r' 108 'l' 100 'd' 0 '\000'

Use the following to show 13 characters starting at a memory address in
decimal representation (see Figure 3-7):
    (gdb) x/13d 0x404028
    0x404028 <msg>: 72      101     108     108     111     44      32      87
    0x404030:       111     114     108     100     0

Use the following to show msg (see Figure 3-9):
    (gdb) x/s &msg
    0x404028 <msg>: "Hello, World"

Let’s return to the disassemble listing. Type the following:
    (gdb) x/2x 0401110
    0x401110 <main>:        0xb8    0x01
This shows in hexadecimal the content of the two memory addresses starting at 0x401110

we will put a break in the program, pausing the execution and
allowing us to examine a number or things
    (gdb) break main
    Breakpoint 1 at 0x401110: file hello.asm, line 10

    (gdb) run
    Breakpoint 1, main () at hello.asm:10
    10          mov     rax, 1      ;   1 = syscall to write    

The debugger stops at the break and shows the next instruction that will
be executed. That is, mov rax,1 is not executed yet.

    (gdb) info registers
    rax            0x401110            4198672
    rbx            0x0                 0
    rcx            0x403e58            4210264
    rdx            0x7ffffffee0b8      140737488281784
    rsi            0x7ffffffee0a8      140737488281768
    rdi            0x1                 1
    rbp            0x1                 0x1
    rsp            0x7ffffffedf98      0x7ffffffedf98
    r8             0x7fffff78af10      140737479487248
    r9             0x7fffff7b6040      140737479663680
    r10            0x7fffff7b0908      140737479641352
    r11            0x7fffff7cb680      140737479751296
    r12            0x7ffffffee0a8      140737488281768
    r13            0x401110            4198672
    r14            0x403e58            4210264
    r15            0x7fffff7ea040      140737479876672
    rip            0x401110            0x401110 <main>
    eflags         0x246               [ PF ZF IF ]
    cs             0x33                51
    ss             0x2b                43
    ds             0x0                 0
    es             0x0                 0
    fs             0x0                 0
    gs             0x0                 0

Register rip has the value 0x401110, which is the memory address of the next
instruction to execute. Check your disassemble listing; 0x401110 (in our case)
points to the first instruction, mov rax,1. GDB stops just before that instruction
and waits for your commands. *** It is important to remember that the instruction pointed
to by rip is not yet executed. ***

    (gdb) step  
    11          mov     rdi, 1      ;   1 = to stdout
    (gdb) i r  ==================================================> info register same command
    rax            0x1                 1
    rbx            0x0                 0
    rcx            0x403e58            4210264
    rdx            0x7ffffffee0b8      140737488281784
    rsi            0x7ffffffee0a8      140737488281768
    rdi            0x1                 1
    rbp            0x1                 0x1
    rsp            0x7ffffffedf98      0x7ffffffedf98
    r8             0x7fffff78af10      140737479487248
    r9             0x7fffff7b6040      140737479663680
    r10            0x7fffff7b0908      140737479641352
    r11            0x7fffff7cb680      140737479751296
    r12            0x7ffffffee0a8      140737488281768
    r13            0x401110            4198672
    r14            0x403e58            4210264
    r15            0x7fffff7ea040      140737479876672
    rip            0x401115            0x401115 <main+5>
    eflags         0x246               [ PF ZF IF ]
    cs             0x33                51
    ss             0x2b                43
    ds             0x0                 0
    es             0x0                 0
    fs             0x0                 0
    gs             0x0                 0

rax contains now 0x1, and rip contains the address of the next
instruction to execute.